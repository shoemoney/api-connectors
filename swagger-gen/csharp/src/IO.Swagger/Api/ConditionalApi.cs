/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConditionalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Object</returns>
        Object ConditionalCancel (string stopOrderId);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConditionalCancelWithHttpInfo (string stopOrderId);
        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Object</returns>
        Object ConditionalGetOrders (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConditionalGetOrdersWithHttpInfo (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null);
        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        Object ConditionalNew (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConditionalNewWithHttpInfo (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);
        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        Object ConditionalReplace (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ConditionalReplaceWithHttpInfo (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConditionalCancelAsync (string stopOrderId);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalCancelAsyncWithHttpInfo (string stopOrderId);
        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConditionalGetOrdersAsync (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalGetOrdersAsyncWithHttpInfo (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null);
        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConditionalNewAsync (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalNewAsyncWithHttpInfo (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);
        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ConditionalReplaceAsync (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified. 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalReplaceAsyncWithHttpInfo (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConditionalApi : IConditionalApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConditionalApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConditionalApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Object</returns>
        public Object ConditionalCancel (string stopOrderId)
        {
             ApiResponse<Object> localVarResponse = ConditionalCancelWithHttpInfo(stopOrderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConditionalCancelWithHttpInfo (string stopOrderId)
        {
            // verify the required parameter 'stopOrderId' is set
            if (stopOrderId == null)
                throw new ApiException(400, "Missing required parameter 'stopOrderId' when calling ConditionalApi->ConditionalCancel");

            var localVarPath = "/open-api/stop-order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Cancel conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConditionalCancelAsync (string stopOrderId)
        {
             ApiResponse<Object> localVarResponse = await ConditionalCancelAsyncWithHttpInfo(stopOrderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalCancelAsyncWithHttpInfo (string stopOrderId)
        {
            // verify the required parameter 'stopOrderId' is set
            if (stopOrderId == null)
                throw new ApiException(400, "Missing required parameter 'stopOrderId' when calling ConditionalApi->ConditionalCancel");

            var localVarPath = "/open-api/stop-order/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get my conditional order list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Object</returns>
        public Object ConditionalGetOrders (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null)
        {
             ApiResponse<Object> localVarResponse = ConditionalGetOrdersWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get my conditional order list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConditionalGetOrdersWithHttpInfo (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null)
        {

            var localVarPath = "/open-api/stop-order/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalGetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get my conditional order list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConditionalGetOrdersAsync (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null)
        {
             ApiResponse<Object> localVarResponse = await ConditionalGetOrdersAsyncWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get my conditional order list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. Default BTCUSD. (optional)</param>
        /// <param name="order">Sort orders by creation date (optional)</param>
        /// <param name="page">Page. Default getting first page data (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalGetOrdersAsyncWithHttpInfo (string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, decimal? page = null, decimal? limit = null)
        {

            var localVarPath = "/open-api/stop-order/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopOrderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalGetOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Place a new conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        public Object ConditionalNew (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
             ApiResponse<Object> localVarResponse = ConditionalNewWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a new conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConditionalNewWithHttpInfo (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'orderType' is set
            if (orderType == null)
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'qty' is set
            if (qty == null)
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'basePrice' is set
            if (basePrice == null)
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'stopPx' is set
            if (stopPx == null)
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");

            var localVarPath = "/open-api/stop-order/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", orderType)); // query parameter
            if (qty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", qty)); // query parameter
            if (price != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price", price)); // query parameter
            if (basePrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", basePrice)); // query parameter
            if (stopPx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", stopPx)); // query parameter
            if (timeInForce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", timeInForce)); // query parameter
            if (triggerBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", triggerBy)); // query parameter
            if (closeOnTrigger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", closeOnTrigger)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Place a new conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConditionalNewAsync (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
             ApiResponse<Object> localVarResponse = await ConditionalNewAsyncWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a new conditional order. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalNewAsyncWithHttpInfo (string side, string symbol, string orderType, decimal? qty, double? basePrice, double? stopPx, string timeInForce, double? price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side == null)
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'orderType' is set
            if (orderType == null)
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'qty' is set
            if (qty == null)
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'basePrice' is set
            if (basePrice == null)
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'stopPx' is set
            if (stopPx == null)
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");

            var localVarPath = "/open-api/stop-order/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (side != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "side", side)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (orderType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", orderType)); // query parameter
            if (qty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", qty)); // query parameter
            if (price != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "price", price)); // query parameter
            if (basePrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", basePrice)); // query parameter
            if (stopPx != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", stopPx)); // query parameter
            if (timeInForce != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", timeInForce)); // query parameter
            if (triggerBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", triggerBy)); // query parameter
            if (closeOnTrigger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", closeOnTrigger)); // query parameter
            if (orderLinkId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalNew", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        public Object ConditionalReplace (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null)
        {
             ApiResponse<Object> localVarResponse = ConditionalReplaceWithHttpInfo(orderId, symbol, pRQty, pRPrice, pRTriggerPrice);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > ConditionalReplaceWithHttpInfo (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ConditionalApi->ConditionalReplace");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");

            var localVarPath = "/open-api/stop-order/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (pRQty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", pRQty)); // query parameter
            if (pRPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", pRPrice)); // query parameter
            if (pRTriggerPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", pRTriggerPrice)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ConditionalReplaceAsync (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null)
        {
             ApiResponse<Object> localVarResponse = await ConditionalReplaceAsyncWithHttpInfo(orderId, symbol, pRQty, pRPrice, pRTriggerPrice);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">Order ID.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ConditionalReplaceAsyncWithHttpInfo (string orderId, string symbol, decimal? pRQty = null, double? pRPrice = null, double? pRTriggerPrice = null)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling ConditionalApi->ConditionalReplace");
            // verify the required parameter 'symbol' is set
            if (symbol == null)
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");

            var localVarPath = "/open-api/stop-order/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (symbol != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            if (pRQty != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", pRQty)); // query parameter
            if (pRPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", pRPrice)); // query parameter
            if (pRTriggerPrice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", pRTriggerPrice)); // query parameter

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", this.Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", this.Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ConditionalReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
